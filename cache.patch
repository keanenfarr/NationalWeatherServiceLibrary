diff --git a/.vscode/launch.json b/.vscode/launch.json
new file mode 100644
index 0000000..aa21326
--- /dev/null
+++ b/.vscode/launch.json
@@ -0,0 +1,52 @@
+{
+    "version": "0.2.0",
+    "configurations": [
+        {
+            "name": "Debug Console App with Parameters",
+            "type": "coreclr",
+            "request": "launch",
+            "program": "${workspaceFolder}/NWS.ConsoleDemoApp/bin/Debug/net8.0/NWS.ConsoleDemoApp.dll",
+            "args": ["43.072", "89.401"],
+            "cwd": "${workspaceFolder}/NWS.ConsoleDemoApp",
+            "console": "internalConsole",
+            "stopAtEntry": false,
+            "preLaunchTask": "build-console-app"
+        },
+        {
+            "name": "Debug Console App (Interactive Mode)",
+            "type": "coreclr",
+            "request": "launch",
+            "program": "${workspaceFolder}/NWS.ConsoleDemoApp/bin/Debug/net8.0/NWS.ConsoleDemoApp.dll",
+            "args": [],
+            "cwd": "${workspaceFolder}/NWS.ConsoleDemoApp",
+            "console": "internalConsole",
+            "stopAtEntry": false,
+            "preLaunchTask": "build-console-app"
+        },
+        {
+            "name": "Debug Console App (Custom Parameters)",
+            "type": "coreclr",
+            "request": "launch",
+            "program": "${workspaceFolder}/NWS.ConsoleDemoApp/bin/Debug/net8.0/NWS.ConsoleDemoApp.dll",
+            "args": ["${input:latitude}", "${input:longitude}"],
+            "cwd": "${workspaceFolder}/NWS.ConsoleDemoApp",
+            "console": "internalConsole",
+            "stopAtEntry": false,
+            "preLaunchTask": "build-console-app"
+        }
+    ],
+    "inputs": [
+        {
+            "id": "latitude",
+            "description": "Enter latitude",
+            "default": "43.072",
+            "type": "promptString"
+        },
+        {
+            "id": "longitude",
+            "description": "Enter longitude",
+            "default": "89.401",
+            "type": "promptString"
+        }
+    ]
+}
\ No newline at end of file
diff --git a/.vscode/tasks.json b/.vscode/tasks.json
new file mode 100644
index 0000000..d317c73
--- /dev/null
+++ b/.vscode/tasks.json
@@ -0,0 +1,21 @@
+{
+    "version": "2.0.0",
+    "tasks": [
+        {
+            "label": "build-console-app",
+            "command": "dotnet",
+            "type": "process",
+            "args": [
+                "build",
+                "${workspaceFolder}/NWS.ConsoleDemoApp/NWS.ConsoleDemoApp.csproj",
+                "/property:GenerateFullPaths=true",
+                "/consoleloggerparameters:NoSummary"
+            ],
+            "group": "build",
+            "presentation": {
+                "reveal": "silent"
+            },
+            "problemMatcher": "$msCompile"
+        }
+    ]
+}
\ No newline at end of file
diff --git a/NWS.ConsoleDemoApp/NWS.ConsoleDemoApp.csproj b/NWS.ConsoleDemoApp/NWS.ConsoleDemoApp.csproj
index 28893fb..6ff6b6d 100644
--- a/NWS.ConsoleDemoApp/NWS.ConsoleDemoApp.csproj
+++ b/NWS.ConsoleDemoApp/NWS.ConsoleDemoApp.csproj
@@ -2,7 +2,7 @@
 
   <PropertyGroup>
     <OutputType>Exe</OutputType>
-	  <TargetFrameworks>net9.0;net8.0;</TargetFrameworks>
+    <TargetFramework>net8.0</TargetFramework>
   </PropertyGroup>
 
   <ItemGroup>
diff --git a/NWS.ConsoleDemoApp/Program.cs b/NWS.ConsoleDemoApp/Program.cs
index 0616ec8..0f689b7 100644
--- a/NWS.ConsoleDemoApp/Program.cs
+++ b/NWS.ConsoleDemoApp/Program.cs
@@ -1,4 +1,5 @@
 ï»¿using System;
+using System.Net;
 using System.Threading.Tasks;
 
 namespace NWS.ConsoleDemoApp
@@ -7,38 +8,30 @@ namespace NWS.ConsoleDemoApp
     {
         static async Task Main(string[] args)
         {
-            decimal latitude = 0;
-            decimal longitude = 0;
-            string latitudeStr = string.Empty;
-            string longitudeStr = string.Empty;
+            // Get latitude and longitude from args or prompt user
+            string latString = (args.Length > 0 && args[0] != null) ? args[0] : PromptForLatitude();
+            string longString = (args.Length > 1 && args[1] != null) ? args[1] : PromptForLongitude();
 
-            while (string.IsNullOrEmpty(latitudeStr) || latitude == 0)
+            // Parse the strings to decimals
+            if (!decimal.TryParse(latString, out decimal latitude))
             {
-                Console.WriteLine("Enter latitude:");
-                latitudeStr = Console.ReadLine();
-
-                decimal.TryParse(latitudeStr, out latitude);
-
-                if (string.IsNullOrEmpty(latitudeStr) || latitude == 0)
-                {
-                    Console.WriteLine("Invalid latitude! Try again.");
-                }
+                Console.WriteLine($"Error: Invalid latitude '{latString}'. Please provide a valid decimal number.");
+                return;
             }
 
-            while (string.IsNullOrEmpty(longitudeStr) || longitude == 0)
+            if (!decimal.TryParse(longString, out decimal longitude))
             {
-                Console.WriteLine("Enter longitude:");
-                longitudeStr = Console.ReadLine();
+                Console.WriteLine($"Error: Invalid longitude '{longString}'. Please provide a valid decimal number.");
+                return;
+            }
 
-                decimal.TryParse(longitudeStr, out longitude);
+            Console.WriteLine($"Using coordinates: Latitude {latitude}, Longitude {longitude}");
+            Console.WriteLine();
 
-                if (string.IsNullOrEmpty(longitudeStr) || longitude == 0)
-                {
-                    Console.WriteLine("Invalid longitude! Try again.");
-                }
-            }
+            //Needs to be RFC 7231 compliant: ProductName/Version (Comment)
+            var webClient = new NWS.WebClient.Default.WebClient("jts599NWSConsoleDemoApp/1.0");
 
-            var service = new NWS.WeatherDataService.WeatherDataService();
+            var service = new NWS.WeatherDataService.WeatherDataService(webClient);
 
             var currentConditions = await service.GetCurrentConditionsAsync(latitude, longitude);
 
@@ -46,67 +39,67 @@ namespace NWS.ConsoleDemoApp
             {
                 Console.WriteLine();
                 Console.WriteLine($"STATION INFORMATION ----------------");
-                Console.WriteLine($"Station: { currentConditions.Station.Name } ({ currentConditions.Station.StationIdentifier }):");
-                Console.WriteLine($"Station Elevation in Meters: { currentConditions.Station.ElevationInMeters }");
-                Console.WriteLine($"Station Coordinates: { currentConditions.Station.Latitude }, { currentConditions.Station.Longitude }");
+                Console.WriteLine($"Station: {currentConditions.Station.Name} ({currentConditions.Station.StationIdentifier}):");
+                Console.WriteLine($"Station Elevation in Meters: {currentConditions.Station.ElevationInMeters}");
+                Console.WriteLine($"Station Coordinates: {currentConditions.Station.Latitude}, {currentConditions.Station.Longitude}");
                 Console.WriteLine();
                 Console.WriteLine($"CURRENT CONDITIONS -----------------");
-                Console.WriteLine($"Observation Date: { currentConditions.ObservationDate }");
-                Console.WriteLine($"Summary: { currentConditions.TextDescription }");
+                Console.WriteLine($"Observation Date: {currentConditions.ObservationDate}");
+                Console.WriteLine($"Summary: {currentConditions.TextDescription}");
 
                 if (currentConditions.TemperatureFahrenheit.HasValue)
                 {
-                    Console.WriteLine($"Temperature (F): { currentConditions.TemperatureFahrenheit }");
+                    Console.WriteLine($"Temperature (F): {currentConditions.TemperatureFahrenheit}");
                 }
 
                 if (currentConditions.TemperatureCelsius.HasValue)
                 {
-                    Console.WriteLine($"Temperature (C): { currentConditions.TemperatureCelsius }");
+                    Console.WriteLine($"Temperature (C): {currentConditions.TemperatureCelsius}");
                 }
 
                 if (currentConditions.BarometricPressure.HasValue)
                 {
-                    Console.WriteLine($"Barometric Pressure: { currentConditions.BarometricPressure }");
+                    Console.WriteLine($"Barometric Pressure: {currentConditions.BarometricPressure}");
                 }
 
                 if (currentConditions.DewPointFahrenheit.HasValue)
                 {
-                    Console.WriteLine($"Dew Point (F): { currentConditions.DewPointFahrenheit }");
+                    Console.WriteLine($"Dew Point (F): {currentConditions.DewPointFahrenheit}");
                 }
 
                 if (currentConditions.HeatIndexFahrenheit.HasValue)
                 {
-                    Console.WriteLine($"Heat Index (F): { currentConditions.HeatIndexFahrenheit }");
+                    Console.WriteLine($"Heat Index (F): {currentConditions.HeatIndexFahrenheit}");
                 }
 
                 if (currentConditions.RelativeHumidityPercent.HasValue)
                 {
-                    Console.WriteLine($"Relative Humidity: { currentConditions.RelativeHumidityPercent }");
+                    Console.WriteLine($"Relative Humidity: {currentConditions.RelativeHumidityPercent}");
                 }
 
                 if (currentConditions.SeaLevelPressure.HasValue)
                 {
-                    Console.WriteLine($"Sea Level Pressure: { currentConditions.SeaLevelPressure }");
+                    Console.WriteLine($"Sea Level Pressure: {currentConditions.SeaLevelPressure}");
                 }
 
                 if (currentConditions.VisibilityMeters.HasValue)
                 {
-                    Console.WriteLine($"Visibility in Meters: { currentConditions.VisibilityMeters }");
+                    Console.WriteLine($"Visibility in Meters: {currentConditions.VisibilityMeters}");
                 }
 
                 if (currentConditions.WindChillFahrenheit.HasValue)
                 {
-                    Console.WriteLine($"Wind Chill (F): { currentConditions.WindChillFahrenheit }");
+                    Console.WriteLine($"Wind Chill (F): {currentConditions.WindChillFahrenheit}");
                 }
 
                 if (currentConditions.WindGustMilesPerHour.HasValue)
                 {
-                    Console.WriteLine($"Wind Gust (MPH): { currentConditions.WindGustMilesPerHour }");
+                    Console.WriteLine($"Wind Gust (MPH): {currentConditions.WindGustMilesPerHour}");
                 }
 
                 if (currentConditions.WindSpeedMilesPerHour.HasValue)
                 {
-                    Console.WriteLine($"Wind Speed (MPH): { currentConditions.WindSpeedMilesPerHour }");
+                    Console.WriteLine($"Wind Speed (MPH): {currentConditions.WindSpeedMilesPerHour}");
                 }
             }
             else
@@ -121,22 +114,22 @@ namespace NWS.ConsoleDemoApp
 
             if (forecast != null)
             {
-                Console.WriteLine($"Last updated date: { forecast.LastUpdatedDate }");
-                Console.WriteLine($"Elevation in Meters: { forecast.ElevationInMeters }");
-                Console.WriteLine($"Latitude: { forecast.Latitude }");
-                Console.WriteLine($"Longitude: { forecast.Longitude }");
+                Console.WriteLine($"Last updated date: {forecast.LastUpdatedDate}");
+                Console.WriteLine($"Elevation in Meters: {forecast.ElevationInMeters}");
+                Console.WriteLine($"Latitude: {forecast.Latitude}");
+                Console.WriteLine($"Longitude: {forecast.Longitude}");
 
                 foreach (var period in forecast.Periods)
                 {
                     Console.WriteLine();
-                    Console.WriteLine($"From { period.StartTime } to { period.EndTime }:");
-                    Console.WriteLine($"Name: { period.Name }");
-                    Console.WriteLine($"Long Forecast: { period.ForecastLong }");
-                    Console.WriteLine($"Short Forecast: { period.ForecastShort }");
-                    Console.WriteLine($"Is Day Time? { period.IsDayTime }");
-                    Console.WriteLine($"Temperature (F): { period.TemperatureInFahrenheit }");
-                    Console.WriteLine($"Wind Direction: { period.WindDirection }");
-                    Console.WriteLine($"Wind Speed: { period.WindSpeed }");
+                    Console.WriteLine($"From {period.StartTime} to {period.EndTime}:");
+                    Console.WriteLine($"Name: {period.Name}");
+                    Console.WriteLine($"Long Forecast: {period.ForecastLong}");
+                    Console.WriteLine($"Short Forecast: {period.ForecastShort}");
+                    Console.WriteLine($"Is Day Time? {period.IsDayTime}");
+                    Console.WriteLine($"Temperature (F): {period.TemperatureInFahrenheit}");
+                    Console.WriteLine($"Wind Direction: {period.WindDirection}");
+                    Console.WriteLine($"Wind Speed: {period.WindSpeed}");
                 }
             }
             else
@@ -149,5 +142,37 @@ namespace NWS.ConsoleDemoApp
             Console.WriteLine("THE END. Press enter to quit.");
             Console.ReadLine();
         }
+
+        static string PromptForLatitude()
+        {
+            string latitudeStr = string.Empty;
+            while (string.IsNullOrEmpty(latitudeStr))
+            {
+                Console.WriteLine("Enter latitude:");
+                latitudeStr = Console.ReadLine();
+
+                if (string.IsNullOrEmpty(latitudeStr))
+                {
+                    Console.WriteLine("Invalid latitude! Try again.");
+                }
+            }
+            return latitudeStr;
+        }
+
+        static string PromptForLongitude()
+        {
+            string longitudeStr = string.Empty;
+            while (string.IsNullOrEmpty(longitudeStr))
+            {
+                Console.WriteLine("Enter longitude:");
+                longitudeStr = Console.ReadLine();
+
+                if (string.IsNullOrEmpty(longitudeStr))
+                {
+                    Console.WriteLine("Invalid longitude! Try again.");
+                }
+            }
+            return longitudeStr;
+        }
     }
 }
\ No newline at end of file
diff --git a/NationalWeatherService/NWS.Model/NWS.Model.csproj b/NationalWeatherService/NWS.Model/NWS.Model.csproj
index b79c55c..8004e88 100644
--- a/NationalWeatherService/NWS.Model/NWS.Model.csproj
+++ b/NationalWeatherService/NWS.Model/NWS.Model.csproj
@@ -1,7 +1,7 @@
 ï»¿<Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>net9.0;net8.0;</TargetFrameworks>
+    <TargetFrameworks>net8.0;</TargetFrameworks>
     <AssemblyVersion>2.0.0.0</AssemblyVersion>
     <FileVersion>2.0.0.0</FileVersion>
     <Version>1.2.0</Version>
diff --git a/NationalWeatherService/NWS.WeatherDataService.Tests/NWS.WeatherDataService.Tests.csproj b/NationalWeatherService/NWS.WeatherDataService.Tests/NWS.WeatherDataService.Tests.csproj
index b85a543..c4dd674 100644
--- a/NationalWeatherService/NWS.WeatherDataService.Tests/NWS.WeatherDataService.Tests.csproj
+++ b/NationalWeatherService/NWS.WeatherDataService.Tests/NWS.WeatherDataService.Tests.csproj
@@ -1,7 +1,7 @@
 ï»¿<Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-	  <TargetFrameworks>net9.0;net8.0;</TargetFrameworks>
+	  <TargetFrameworks>net8.0;</TargetFrameworks>
 
     <IsPackable>false</IsPackable>
 
diff --git a/NationalWeatherService/NWS.WeatherDataService/NWS.WeatherDataService.csproj b/NationalWeatherService/NWS.WeatherDataService/NWS.WeatherDataService.csproj
index 834478c..54aeaae 100644
--- a/NationalWeatherService/NWS.WeatherDataService/NWS.WeatherDataService.csproj
+++ b/NationalWeatherService/NWS.WeatherDataService/NWS.WeatherDataService.csproj
@@ -1,7 +1,7 @@
 ï»¿<Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-	  <TargetFrameworks>net9.0;net8.0;</TargetFrameworks>
+	  <TargetFrameworks>net8.0;</TargetFrameworks>
     <AssemblyVersion>2.0.0.0</AssemblyVersion>
     <FileVersion>2.0.0.0</FileVersion>
     <Version>1.3.0</Version>
diff --git a/NationalWeatherService/NWS.WeatherDataService/ResultCache.cs b/NationalWeatherService/NWS.WeatherDataService/ResultCache.cs
new file mode 100644
index 0000000..dde536b
--- /dev/null
+++ b/NationalWeatherService/NWS.WeatherDataService/ResultCache.cs
@@ -0,0 +1,107 @@
+using System.Collections.Concurrent;
+using System.Threading.Tasks;
+using System.Threading;
+using System;
+
+namespace NWS.WeatherDataService
+{
+
+    /// <summary>
+    /// Factory interface for creating results to be cached
+    /// </summary>
+    public interface IResultFactory<TKey, TResult>
+    {
+        Task<TResult> GetResult(TKey key);
+    }
+
+    /// <summary>
+    /// A key representing a geographic location
+    /// </summary>
+    public class LocationKey : IEquatable<LocationKey>
+    {
+        public decimal Latitude { get; set; }
+        public decimal Longitude { get; set; }
+
+        public bool Equals(LocationKey other)
+        {
+            if (other == null) return false;
+            return this.Latitude == other.Latitude && this.Longitude == other.Longitude;
+        }
+
+        public override int GetHashCode()
+        {
+            return HashCode.Combine(Latitude, Longitude);
+        }
+    }
+
+
+    /// <summary>
+    /// A cache for URLs since NWS forecast and current conditions urls are not based off of longitude/latitude,
+    /// but rather on internal NWS gridpoint identifiers. This class caches off the URLs for those gridpoints.
+    /// </summary>
+    public class ResultCache<TKey, TResult> where TKey : IEquatable<TKey> where TResult : class
+    {
+        /// <summary>
+        /// The cache dictionary
+        /// </summary>
+        private static readonly ConcurrentDictionary<TKey, TResult> cache = new ConcurrentDictionary<TKey, TResult>();
+
+        /// <summary>
+        /// Locks for each key to ensure thread-safe access
+        /// </summary>
+        private static readonly ConcurrentDictionary<TKey, SemaphoreSlim> keyLocks =
+            new ConcurrentDictionary<TKey, SemaphoreSlim>();
+
+        /// <summary>
+        /// Factory interface for creating results to be cached
+        /// </summary>
+        private readonly IResultFactory<TKey, TResult> resultFactory;
+
+        /// <summary>
+        /// Constructor that accepts a result factory
+        /// </summary>
+        /// <param name="resultFactory">Factory for creating results</param>
+        public ResultCache(IResultFactory<TKey, TResult> resultFactory)
+        {
+            this.resultFactory = resultFactory;
+        }
+
+
+        /// <summary>
+        /// Gets a result from the cache, or creates it using the factory if not present
+        /// </summary>
+        /// <param name="key">The key for the cached result</param>
+        /// <returns>The cached result OR a newly created result</returns>
+        public async Task<TResult> Get(TKey key)
+        {
+            // This is threadsafe due to ConcurrentDictionary
+            if (cache.TryGetValue(key, out var cachedResult))
+            {
+                return cachedResult;
+            }
+
+            // Ok any of this stuff is not thread safe, we need to lock per key
+            var semaphore = keyLocks.GetOrAdd(key, _ => new SemaphoreSlim(1, 1));
+
+            await semaphore.WaitAsync();
+            try
+            {
+                // Double-check after acquiring lock in case another thread added it while we were waiting
+                if (cache.TryGetValue(key, out cachedResult))
+                {
+                    return cachedResult;
+                }
+
+                // Create the result since it is still not present
+                var result = await resultFactory.GetResult(key);
+                cache.TryAdd(key, result);
+                return result;
+            }
+            finally
+            {
+                // Release the lock
+                semaphore.Release();
+            }
+        }
+    }
+}
diff --git a/NationalWeatherService/NWS.WeatherDataService/WeatherDataService.cs b/NationalWeatherService/NWS.WeatherDataService/WeatherDataService.cs
index 0085443..411fea1 100644
--- a/NationalWeatherService/NWS.WeatherDataService/WeatherDataService.cs
+++ b/NationalWeatherService/NWS.WeatherDataService/WeatherDataService.cs
@@ -9,35 +9,28 @@ using System.Threading.Tasks;
 
 namespace NWS.WeatherDataService
 {
+
     /// <summary>
-    /// Gets weather data from the National Weather Service (api.weather.gov)
+    /// Gets the weather stations for a given latitude and longitude
     /// </summary>
-    public class WeatherDataService : IWeatherDataProvider
+    internal class WeatherStationResultFactory : IResultFactory<LocationKey, IEnumerable<WeatherStation>>
     {
-        readonly IWebClient webClient;
+        private readonly IWebClient WebClient;
 
-        public WeatherDataService()
+        public WeatherStationResultFactory(IWebClient webClient)
         {
-            webClient = new NWS.WebClient.Default.WebClient();
+            this.WebClient = webClient;
         }
 
-        public WeatherDataService(IWebClient webClient)
+        public async Task<IEnumerable<WeatherStation>> GetResult(LocationKey key)
         {
-            this.webClient = webClient;
-        }
+            var lat = key.Latitude;
+            var lng = key.Longitude;
+
+            var result = new List<WeatherStation>();
 
-        /// <summary>
-        /// Gets the current weather conditions for a given latitude and longitude
-        /// </summary>
-        /// <param name="lat">Latitude</param>
-        /// <param name="lng">Longitude</param>
-        /// <returns>A CurrentConditionsResponse containing current weather data conditions.</returns>
-        public async Task<CurrentConditionsResponse> GetCurrentConditionsAsync(decimal lat, decimal lng)
-        {
-            CurrentConditionsResponse response = null;
-            
             //Get the current list of stations for the given latitude and longitude.
-            var redirectResponseText = await webClient.GetAsync($"https://api.weather.gov/points/{ lat.ToString("0.####") },{ lng.ToString("0.####") }");
+            var redirectResponseText = await WebClient.GetAsync($"https://api.weather.gov/points/{lat.ToString("0.####")},{lng.ToString("0.####")}");
 
             //Parse the json response
             dynamic json = JObject.Parse(redirectResponseText);
@@ -46,7 +39,7 @@ namespace NWS.WeatherDataService
             var observationStationsUrl = (string)json.properties.observationStations;
 
             //Load the observation stations URL from the API
-            var observationResponseText = await webClient.GetAsync(observationStationsUrl);
+            var observationResponseText = await WebClient.GetAsync(observationStationsUrl);
 
             //Parse the json response
             dynamic json2 = JObject.Parse(observationResponseText);
@@ -89,31 +82,31 @@ namespace NWS.WeatherDataService
                             station.Latitude = s.geometry.coordinates[1];
                         }
 
-                        //Attempt to get the current conditions for the station provided.
-                        response = await GetCurrentConditionsForStationAsync(station);
-                    }
-
-                    //If we have current conditions, return it. Otherwise, continue through loop.
-                    if (response != null)
-                    {
-                        break;
+                        result.Add(station);
                     }
                 }
             }
+            return result;
+        }
+    }
 
-            return response;
+
+    internal class ForecastUrlResultFactory : IResultFactory<LocationKey, string>
+    {
+        private readonly IWebClient WebClient;
+
+        public ForecastUrlResultFactory(IWebClient webClient)
+        {
+            this.WebClient = webClient;
         }
 
-        /// <summary>
-        /// Gets the weather forecast for a given latitude and longitude
-        /// </summary>
-        /// <param name="lat">Latitude</param>
-        /// <param name="lng">Longitude</param>
-        /// <returns>A ForecastResponse containing forecast data for the given latitude and longitude</returns>
-        public async Task<ForecastResponse> GetForecastAsync(decimal lat, decimal lng)
+        public async Task<string> GetResult(LocationKey key)
         {
+            var lat = key.Latitude;
+            var lng = key.Longitude;
+
             //Get the gridpoint information for the given latitude and longitude.
-            var redirectResponseText = await webClient.GetAsync($"https://api.weather.gov/points/{ lat.ToString("0.####") },{ lng.ToString("0.####") }");
+            var redirectResponseText = await WebClient.GetAsync($"https://api.weather.gov/points/{lat.ToString("0.####")},{lng.ToString("0.####")}");
 
             //Parse the json response
             dynamic json = JObject.Parse(redirectResponseText);
@@ -121,43 +114,71 @@ namespace NWS.WeatherDataService
             //Get the forecast Url from the response
             var forecastUrl = (string)json.properties.forecast;
 
-            //Load the forecast Url
-            var forecastResponseText = await webClient.GetAsync(forecastUrl);
+            return forecastUrl;
+        }
+    }
 
-            //Parse the json response
-            dynamic json2 = JObject.Parse(forecastResponseText);
+    /// <summary>
+    /// Gets weather data from the National Weather Service (api.weather.gov)
+    /// </summary>
+    public class WeatherDataService : IWeatherDataProvider
+    {
+        readonly IWebClient webClient;
 
-            //Instantiate a new ForecastResponse object and fill it with the data received
-            var response = new ForecastResponse()
-            {
-                Periods = new List<ForecastPeriod>(),
-                ElevationInMeters = json2.properties.elevation.value,
-                LastUpdatedDate = json2.properties.updateTime,
-                Latitude = lat,
-                Longitude = lng
-            };
+        private ResultCache<LocationKey, IEnumerable<WeatherStation>> weatherStationCache = null;
 
-            foreach (dynamic p in json2.properties.periods)
+        private ResultCache<LocationKey, string> forecastUrlCache = null;
+
+        public WeatherDataService(IWebClient webClient)
+        {
+            this.webClient = webClient;
+            weatherStationCache = new ResultCache<LocationKey, IEnumerable<WeatherStation>>(new WeatherStationResultFactory(webClient));
+            forecastUrlCache = new ResultCache<LocationKey, string>(new ForecastUrlResultFactory(webClient));
+        }
+
+
+
+        /// <summary>
+        /// Gets the current weather conditions for a given latitude and longitude
+        /// </summary>
+        /// <param name="lat">Latitude</param>
+        /// <param name="lng">Longitude</param>
+        /// <returns>A CurrentConditionsResponse containing current weather data conditions.</returns>
+        public async Task<CurrentConditionsResponse> GetCurrentConditionsAsync(decimal lat, decimal lng)
+        {
+            var stations = await weatherStationCache.Get(new LocationKey() { Latitude = lat, Longitude = lng });
+
+            foreach (var station in stations)
             {
-                response.Periods.Add(new ForecastPeriod()
+                var response = await GetCurrentConditionsForStationAsync(station);
+                if (response != null)
                 {
-                    Name = p.name,
-                    StartTime = p.startTime,
-                    EndTime = p.endTime,
-                    IsDayTime = p.isDaytime,
-                    TemperatureInFahrenheit = p.temperature,
-                    WindSpeed = p.windSpeed,
-                    WindDirection = p.windDirection,
-                    ForecastShort = p.shortForecast,
-                    ForecastLong = p.detailedForecast
-                });
+                    return response;
+                }
             }
 
-            response.RawData = forecastResponseText;
+            return null;
+        }
 
-            return response;
+        /// <summary>
+        /// Gets the weather forecast for a given latitude and longitude
+        /// </summary>
+        /// <param name="lat">Latitude</param>
+        /// <param name="lng">Longitude</param>
+        /// <returns>A ForecastResponse containing forecast data for the given latitude and longitude</returns>
+        public async Task<ForecastResponse> GetForecastAsync(decimal lat, decimal lng)
+        {
+            //Get the forecast Url for the given latitude and longitude
+            var forecastUrl = await forecastUrlCache.Get(new LocationKey() { Latitude = lat, Longitude = lng });
+
+            //Load the forecast Url
+            var forecastResponseText = await webClient.GetAsync(forecastUrl);
+
+            return ParseForecastResponse(forecastResponseText, lat, lng);
         }
 
+
+
         /// <summary>
         /// Retrieves the closest weather station for the given latitude and longitude coordinates
         /// </summary>
@@ -250,7 +271,7 @@ namespace NWS.WeatherDataService
             if (station != null)
             {
                 //Get the current observations for the provided weather station
-                var observationsText = await webClient.GetAsync($"https://api.weather.gov/stations/{ station.StationIdentifier }/observations/latest");
+                var observationsText = await webClient.GetAsync($"https://api.weather.gov/stations/{station.StationIdentifier}/observations/latest");
 
                 //Parse the json response
                 dynamic json = JObject.Parse(observationsText);
@@ -334,5 +355,49 @@ namespace NWS.WeatherDataService
 
             return result;
         }
+
+
+        /// <summary>
+        /// Parses the forecast response from the NWS API into a ForecastResponse object
+        /// </summary>
+        /// <param name="forecastResponseText">The raw JSON response from the NWS API</param>
+        /// <param name="lat">The latitude for the forecast</param>
+        /// <param name="lng">The longitude for the forecast</param>
+        /// <returns>A ForecastResponse object populated with the forecast data</returns>
+        private ForecastResponse ParseForecastResponse(string forecastResponseText, decimal lat, decimal lng)
+        {
+            //Parse the json response
+            dynamic json2 = JObject.Parse(forecastResponseText);
+
+            //Instantiate a new ForecastResponse object and fill it with the data received
+            var response = new ForecastResponse()
+            {
+                Periods = new List<ForecastPeriod>(),
+                ElevationInMeters = json2.properties.elevation.value,
+                LastUpdatedDate = json2.properties.updateTime,
+                Latitude = lat,
+                Longitude = lng
+            };
+
+            foreach (dynamic p in json2.properties.periods)
+            {
+                response.Periods.Add(new ForecastPeriod()
+                {
+                    Name = p.name,
+                    StartTime = p.startTime,
+                    EndTime = p.endTime,
+                    IsDayTime = p.isDaytime,
+                    TemperatureInFahrenheit = p.temperature,
+                    WindSpeed = p.windSpeed,
+                    WindDirection = p.windDirection,
+                    ForecastShort = p.shortForecast,
+                    ForecastLong = p.detailedForecast
+                });
+            }
+
+            response.RawData = forecastResponseText;
+
+            return response;
+        }
     }
 }
diff --git a/NationalWeatherService/NWS.WebClient.Default/NWS.WebClient.Default.csproj b/NationalWeatherService/NWS.WebClient.Default/NWS.WebClient.Default.csproj
index ec00ad4..e213f9b 100644
--- a/NationalWeatherService/NWS.WebClient.Default/NWS.WebClient.Default.csproj
+++ b/NationalWeatherService/NWS.WebClient.Default/NWS.WebClient.Default.csproj
@@ -1,7 +1,7 @@
 ï»¿<Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-	  <TargetFrameworks>net9.0;net8.0;</TargetFrameworks>
+	  <TargetFrameworks>net8.0;</TargetFrameworks>
     <AssemblyVersion>1.0.0.0</AssemblyVersion>
   </PropertyGroup>
 
diff --git a/NationalWeatherService/NWS.WebClient.Default/WebClient.cs b/NationalWeatherService/NWS.WebClient.Default/WebClient.cs
index 2e7e0b2..10c438a 100644
--- a/NationalWeatherService/NWS.WebClient.Default/WebClient.cs
+++ b/NationalWeatherService/NWS.WebClient.Default/WebClient.cs
@@ -11,13 +11,18 @@ namespace NWS.WebClient.Default
         protected static HttpClient HttpClient = new HttpClient();
         private static bool isInitialized = false;
 
-        public WebClient()
+        /// <summary>
+        /// Constructor that allows setting of Application Name for User-Agent header.
+        /// This is used by NWS to track usage.
+        /// </summary>
+        /// <param name="ApplicationName"></param>
+        public WebClient(string ApplicationName)
         {
             if (!isInitialized)
             {
                 HttpClient.Timeout = new TimeSpan(0, 0, 30);
                 HttpClient.DefaultRequestHeaders.Clear();
-                HttpClient.DefaultRequestHeaders.UserAgent.ParseAdd("NWSWeatherLibraryForDotNet/1.0");
+                HttpClient.DefaultRequestHeaders.UserAgent.ParseAdd(ApplicationName);
                 HttpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                 isInitialized = true;
             }
@@ -26,7 +31,7 @@ namespace NWS.WebClient.Default
         public async Task<string> GetAsync(string url)
         {
             var response = await HttpClient.GetAsync(url);
-            
+
             response.EnsureSuccessStatusCode();
 
             return await response.Content.ReadAsStringAsync();
diff --git a/NationalWeatherService/NWS.WebClient/NWS.WebClient.csproj b/NationalWeatherService/NWS.WebClient/NWS.WebClient.csproj
index 3367391..00e7b7d 100644
--- a/NationalWeatherService/NWS.WebClient/NWS.WebClient.csproj
+++ b/NationalWeatherService/NWS.WebClient/NWS.WebClient.csproj
@@ -1,7 +1,7 @@
 ï»¿<Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-	  <TargetFrameworks>net9.0;net8.0;</TargetFrameworks>
+	  <TargetFrameworks>net8.0;</TargetFrameworks>
   </PropertyGroup>
 
 </Project>
